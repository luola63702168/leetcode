#!/usr/local/bin/python3
# -*- coding: utf-8 -*-
# Author  : rusi_

# 案例描述：
#   这里有几种不同面额的钞票，1元、5元、10元、20元、100元、200元的钞票无穷多张，现在使用这些钞票去支付X元的面额，问最少需要多少张？
# 解决方案：
#   尽可能多的使用面值较大的钞票。
#   例如X=628，我们通常会尝试从面额最大的钞票（200元）开始尝试，此时发现200元的钞票只能使用3张，此时剩余的面额是628-3*200=28元，
#   再依次查看次最大面额100元，因为100>28，因此不能用100元构成结果，再次以查看20元，发现可以使用1张，······，
#   以此类推，我们得到最终的最小钞票张数的结果是8（628 = 200*3 + 20*1 + 5*1 + 1*3）
# 问题拓展思考：如果增加一个7元面值的，贪心还能成立不？
#   因为之前的面值是，如果使用小的面额替换大的面额的时候，一定需要更多的其它面额的钞票。但是当有了七元面值的时候这就不一定了，所以是不成立的。
#   当然这种问题可以通过 dynamic programming 来解决。


def money_():
    """
    解决钞票支付问题
    :return: 多少张钞票
    """
    moy = 628
    bank_node = [200, 100, 20, 10, 5, 1]
    count = 0
    for i in range(len(bank_node)):
        use = int(moy / bank_node[i])
        moy = moy - use * bank_node[i]
        count += use
        if moy == 0:
            break
    return count


if __name__ == '__main__':
    print(money_())
